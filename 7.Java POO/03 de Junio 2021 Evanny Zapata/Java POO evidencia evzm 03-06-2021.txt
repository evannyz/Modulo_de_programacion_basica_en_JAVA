Evidencia "DÍA 6 SEMANA 6" del 03/06:
Crear una clase Cuenta para representar una cuenta bancaria. Los datos de la cuenta son: nombre del cliente (String), número de cuenta (String) y saldo (double). Con los siguientes métodos:
-	Constructor por defecto.
-	Constructor con todos los parámetros.
-	Métodos setters/getters para asignar y obtener los datos de la cuenta.
-	Métodos depósito y giro (debe comprobar que hay saldo suficiente).
-	Método transferencia que permita pasar dinero de una cuenta a otra siempre que en la cuenta de origen haya dinero suficiente para poder hacerla.

8Va clase POO en Java: Se realizan ejercicios de encapsulamiento


Ejercicio cuenta bancaria (Metodo Main)---------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

package peracionesb;

import java.util.Scanner;


public class PeracionesB {

    
    public static void main(String[] args) {
        // TODO code application logic here
        
        Scanner leer= new Scanner(System.in);
        
        String nombreb="",n_cuentab="";
        double saldob=0,saldos,saldosb;
        double[]transferencia=new double[2];
        int cont;
        
        System.out.println("Bienvenido a la creacion de su nueva cuenta");
        System.out.println("Ingrese su nombre");
        String nombre=leer.nextLine();
        System.out.println("Ingrese numero de cuenta");
        String n_cuenta=leer.nextLine();
        System.out.println("Ingrese saldo inicial");
        double saldo=leer.nextDouble();
        
        
        
        cont=1;
        
        while(cont==1){
            leer.nextLine();
        System.out.println("\nCreacion de cuentas de tranferencia entre productos");
        System.out.println("Ingrese nombre de cuenta aliada");
        nombreb=leer.nextLine();
        System.out.println("Ingrese numero de cuenta");
        n_cuentab=leer.nextLine();
        System.out.println("Ingrese saldo inicial");
        saldob=leer.nextDouble();
        
        if (n_cuenta.equals(n_cuentab)){
            System.out.println("El número de cuenta no puede ser igual");
            System.out.println("Reingrese valor de cuenta");
            cont=1;
        }else{
            cont=2;
        
        }
        
        
        }
        
        
        
        Cuenta p1=new Cuenta(nombre, n_cuenta, saldo);
        Cuenta p2=new Cuenta(nombreb, n_cuentab, saldob);
        int op;
        
        op=1;
        
        while(op==1){
            
        
        System.out.println("\nSeleccione la operacion que desea realizar");
        System.out.println("1-Deposito 2-Giro 3-Transferencia");
        int operacion=leer.nextInt();
        
        switch (operacion){
            case 1: System.out.println("Operación deposito");
            double deposito=p1.Deposito(saldo);
            saldo=deposito;
            break;
            
            case 2: System.out.println("Operación giro");
            double giro=p1.Giro(saldo);
            saldo=giro;
            break;
            
            case 3: System.out.println("Operación treansferencia");
                System.out.println("La cuenta aliada disponible para realizar la operación es la siguiente:");
                System.out.println("Nombre de titular: "+nombreb+" Número de cuenta: "+n_cuentab);
                System.out.println("¿Desea proceder? 1-Si 2-No");
                int opcion2=leer.nextInt();
                
                switch (opcion2){
                    
                    case 1: 
                        saldos=saldo;
                        saldosb=saldob;
                        transferencia=p1.Transferencia(saldos, saldosb);
                        saldo=transferencia[0];
                        saldob=transferencia[1];
                    break;
                    
                    case 2: System.out.println("Será redirigido");
                    break;
                    
                    default: System.out.println("Opción invalida");
                    break;
                
                }
                
            break;
            
            default: System.out.println("Opción invalida");
        
        
        }
        
            System.out.println("Desea realizar otra operacion 1-Si 2No");
            op=leer.nextInt();
            
            
        
        }
        
        
    }

    }

Ejercicio cuenta bancaria (Clase Cuenta)--------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
    
package peracionesb;

import java.util.Scanner;

public class Cuenta {
    
    
    
    //Atributos 
    private String nombre_cliente;
    private String numero_cuenta;
    private double saldo;
    private double saldoA;
    private double saldoB;

    Scanner leer=new Scanner(System.in);
    
    
    
    //Metodos constructores
    public Cuenta() {
    }

    public Cuenta(String nombre_cliente, String numero_cuenta, double saldo) {
        this.nombre_cliente = nombre_cliente;
        this.numero_cuenta = numero_cuenta;
        this.saldo = saldo;
    }
    
    

    
    
    
    //Setter y Getters
    
    public void setNombre_cliente(String nombre_cliente) {
        this.nombre_cliente = nombre_cliente;
    }

    public void setNumero_cuenta(String numero_cuenta) {
        this.numero_cuenta = numero_cuenta;
    }

    public void setSaldo(double saldo) {
        this.saldo = saldo;
    }

    public String getNombre_cliente() {
        return nombre_cliente;
    }

    public String getNumero_cuenta() {
        return numero_cuenta;
    }

    public double getSaldo() {
        return saldo;
    }

    public void setSaldoA(double saldoA) {
        this.saldoA = saldoA;
    }

    public void setSaldoB(double saldoB) {
        this.saldoB = saldoB;
    }

    public double getSaldoA() {
        return saldoA;
    }

    public double getSaldoB() {
        return saldoB;
    }
    
    
    
    
    //Metodos 
    /**
     *
     * @param saldo
     * @return
     */
    public double Deposito(double saldo){
        this.saldo=saldo;
        int opcion;
        
        opcion=1;
        
        while(opcion==1){
        System.out.println("Su saldo inicial es: "+saldo);
        System.out.println("Ingrese cantidad a depositar");
        double deposito=leer.nextDouble();
        
        if(deposito<=0){
            System.out.println("Su deposito debe ser mayor a 0");
        
        }else{
            saldo=saldo+deposito;
            System.out.println("Su nuevo saldo es:"+saldo);
        
        }
        
            System.out.println("¿Desea seguir depositando?");
            System.out.println("1 Si 2 No");
            opcion=leer.nextInt();
        
        }
      return saldo;  
    
    
    }
    
    public double Giro(double saldo){
        this.saldo=saldo;
        double giro;
        int opcion;
        
        opcion=1;
        
        while(opcion==1){
                System.out.println("Su saldo para realizar giros es "+saldo);
                System.out.println("Ingrese cantidad que desea girar");
                giro=leer.nextDouble();


                if (saldo==0){
                    System.out.println("Su saldo es inuficiente, su saldo actual es "+saldo);

                }else if(saldo>0){

                    if (giro>saldo){
                        System.out.println("No puede girar una cantidad mayor a su saldo");
                        System.out.println("Su saldo es "+ saldo);


                    }else if(saldo>=giro){
                        saldo=saldo-giro;
                        System.out.println("Su nuevo saldo es: "+saldo);


                    }else{
                        System.out.println("opcion invalida");

                    }
                    
                }else{
                    System.out.println("opción invalida");

                }
                
                System.out.println("Desea realizar seguir realizando giro?");
                System.out.println("1-Si 2-No");
                opcion=leer.nextInt();
        
    }
        
        return saldo;
    
    
    }
    
    /**
     *
     * @param saldoA
     * @param saldoB
     * @return
     */
    public double[] Transferencia(double saldoA, double saldoB){
        this.saldoA=saldoA;
        this.saldoB=saldoB;
     
        double[]saldos=new double[2];
        
        int op;
        op=1;
        
        if (saldoA>0){
            
            while(op==1){
            System.out.println("El saldo en la cuenta de origen permite realizar transferencias");
            System.out.println("Su saldo es "+saldoA);
            leer.next();
            System.out.println("Ingrese monto que desea transferir");
            double transferir=leer.nextDouble();
            
            if(transferir>saldo){
                System.out.println("Su transferecia no puede ser superior a su saldo de origen");
                System.out.println("Su saldo disponible es: "+saldoA);
                op=1;
            
            }else if(saldoA>=transferir){
                saldoA=saldoA-transferir;
                saldoB=saldoB+transferir;
                saldos[0]=saldoA;
                saldos[1]=saldoB;
                
              
                op=2;
                
           
            }
         
            }
            
            try {
            
            Thread.sleep(3000);
            } catch (InterruptedException e) {
            }
            System.out.println("Transfiriendo...");
            try {
            
            Thread.sleep(3000);
            } catch (InterruptedException e) {
            }
            
            
            System.out.println("Su nuevo saldo en la cuenta de origen es: "+saldoA+" Su nuevo saldo en la cuenta aliada es"+saldoB);
            
            
            
        
        }
        return saldos;
    
   
    
    }
    
    
    
    
    
}

